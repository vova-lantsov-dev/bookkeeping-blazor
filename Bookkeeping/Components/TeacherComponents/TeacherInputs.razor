@inject NavigationManager Nav
@inject IDbContextFactory<BookkeepingContext> DbFactory

<div class="w3-rest w3-mobile">
    <div class="w3-container w3-padding">
        <InputLabelComponent Label="Фамилия"
                             Value="@Teacher.LastName"
                             OnChange="@((ChangeEventArgs it) => { Teacher.LastName = (string)it.Value!; Edited(); })" />
        <InputLabelComponent Label="Имя"
                             Value="@Teacher.FirstName"
                             OnChange="@(it => { Teacher.FirstName = (string)it.Value!; Edited(); })" />
        <InputLabelComponent Label="Отчество"
                             Value="@Teacher.Patronymic"
                             OnChange="@(it => { Teacher.Patronymic = (string)it.Value!; Edited(); })" />
        <InputLabelComponent Label="Номер телефона"
                             Value="@Teacher.PhoneNumber"
                             OnChange="@(it => { Teacher.PhoneNumber = (string)it.Value!; Edited(); })" />
        <InputLabelComponent Label="Электронный адрес"
                             Value="@Teacher.Email"
                             OnChange="@(it => { Teacher.Email = (string)it.Value!; Edited(); })" />
        <InputLabelComponent Label="Ссылка на фото"
                             Value="@Teacher.ImageUrl"
                             OnChange="@(it => { Teacher.ImageUrl = (string?)it.Value; Edited(); })" />
        <InputLabelComponent Label="Дополнительное поле 1"
                             Value="@Teacher.Additional"
                             OnChange="@(it => { Teacher.Additional = (string?)it.Value; Edited(); })" />
        <InputLabelComponent Label="Оплата за час занятия"
                             Value="@Teacher.PerHour.ToString(CultureInfo.CurrentCulture)"
                             OnChange="@(it => { Teacher.PerHour = decimal.TryParse((string)it.Value!, out decimal perHour) ? perHour : 0m; Edited(); })" />
    </div>
    <br />
    <div class="w3-container w3-padding">
        <input class="w3-check" type="checkbox" @bind="Teacher.Permissions.EditChildren" onclick="@Edited" />
        <label>Изменение личных данных детей</label>
        <br />
        <input class="w3-check" type="checkbox" @bind="Teacher.Permissions.EditTeachers" onclick="@Edited" />
        <label>Изменение личных данных всех преподавателей</label>
        <br />
        <input class="w3-check" type="checkbox" @bind="Teacher.Permissions.EditSubjects" onclick="@Edited" />
        <label>Изменение расписания всех преподавателей</label>
        <br />
        <input class="w3-check" type="checkbox" @bind="Teacher.Permissions.ReadGlobalStatistic" onclick="@Edited" />
        <label>Просмотр статистики</label>
    </div>
    <div class="w3-row">
        @if (!Success)
        {
            if (!Busy)
            {
                <HalfButtonComponent Color="green" Text="Сохранить" Click=@Save />
                <HalfButtonComponent Color="red" Text="Удалить" Click=@Delete />
            }
            else if (Saving)
            {
                <HalfButtonComponent Color="green" NoHover=true Text="Сохраняем..." />
                <HalfButtonComponent Color="red" Disabled=true NoHover=true Text="Удалить" />
            }
            else
            {
                <HalfButtonComponent Color="green" Disabled=true NoHover=true Text="Сохранить" />
                <HalfButtonComponent Color="red" NoHover=true Text="Удаляем..." />
            }
        }
        else
        {
            <HalfButtonComponent Color="green" NoHover=true Disabled=true Text="Сохранить" />
            <HalfButtonComponent Color="red" Text="Удалить" Click=@Delete />
        }
    </div>
    @if (ReadStatistic && Teacher.Id > 0)
    {
        <ButtonComponent Color="blue" Click=@(() => Nav.NavigateTo($"/statistic/teacher/{Teacher.Id}")) Text="Статистика" />
    }
</div>

@code
{
    public bool Busy { get; set; }
    public bool Success { get; set; } = true;
    public bool Saving { get; set; }

    [Parameter]
    public Teacher Teacher { get; set; }

    [Parameter]
    public bool ReadStatistic { get; set; }

    async Task Save()
    {
        if (Busy || Success)
            return;

        Busy = true;
        Saving = true;
        StateHasChanged();

        await using (BookkeepingContext context = await DbFactory.CreateDbContextAsync())
        {
            context.Teachers.Update(Teacher);
            await context.SaveChangesAsync();
        }

        Busy = false;
        Success = true;
        StateHasChanged();
    }

    async Task Delete()
    {
        if (Busy)
            return;

        Busy = true;
        Saving = false;
        StateHasChanged();

        await using (BookkeepingContext context = await DbFactory.CreateDbContextAsync())
        {
            context.Teachers.Remove(Teacher);
            await context.SaveChangesAsync();
        }

        Nav.NavigateTo("/teachers");
    }

    void Edited()
    {
        Success = false;
        StateHasChanged();
    }
}