@inject IDbContextFactory<BookkeepingContext> DbFactory

<div id="modal" class="w3-modal w3-@(Opened ? "show" : "hide")">
    <div class="w3-modal-content w3-card-4 w3-animate-zoom">
        <header class="w3-teal w3-bar w3-padding-small">
            <button class="w3-bar-item w3-button w3-red w3-right w3-hover-teal w3-border w3-border-red w3-large" onclick="@Close">&times;</button>
            @if (EditSubjects)
            {
                 if (!AddingChildren)
                 {
                     <button class="w3-bar-item w3-button w3-green w3-large w3-border w3-border-green w3-hover-teal" onclick="@(() => AddingChildren = true)">Добавить ребёнка</button>
                 }
                 else
                 {
                     <button class="w3-bar-item w3-button w3-red w3-large w3-border w3-border-red w3-hover-teal" onclick="@(() => AddingChildren = false)">Завершить добавление</button>
                 }
            }
            <span class="w3-large w3-bar-item">Консультация</span>
            <div class="w3-bar-item w3-center">
                <label class="switch">
                    @if (EditSubjects)
                    {
                        <input type="checkbox" @bind="Subject.IsConsultation" @bind:onchange="@(async () => { await SetConsultationAsync(); })" />
                    }
                    else
                    {
                        <input type="checkbox" value="@Subject.IsConsultation" disabled />
                    }
                    <span class="slider round"></span>
                </label>
            </div>
        </header>

        <div class="w3-container">
            @{
                var childrenToDisplay = !AddingChildren
                    ? Subject.ChildrenReference.Select(@ref => @ref.Child).ToArray()
                    : AllChildren.Where(c => !Subject.ChildrenReference.Exists(sc => sc.ChildId == c.Id)).ToArray();
                for (var childOffset = 0;; childOffset++)
                {
                    var childrenRow = childrenToDisplay.Skip(childOffset * 3).Take(3).ToList();
                    if (childrenRow.Count == 0)
                    {
                        break;
                    }

                    <div class="w3-row w3-padding-small">
                        @foreach (Child child in childrenRow)
                        {
                            <div class="w3-third w3-mobile w3-padding-small">
                                <div class="w3-center w3-card-4 w3-round">
                                    @if (EditSubjects)
                                    {
                                        <div class="w3-display-container w3-hover-opacity">
                                            <img class="w3-image" style="max-width:300px" alt="Фото для @child.FirstName @child.LastName" src="@child.ImageUrl"/>
                                            <div class="w3-display-middle w3-display-hover">
                                                @if (AddingChildren)
                                                {
                                                    <button class="w3-button w3-green w3-hover-text-green w3-border w3-border-green w3-hover-white" onclick="@(async () => await AddChildAsync(child))">Добавить</button>
                                                }
                                                else
                                                {
                                                    <button class="w3-button w3-red w3-hover-text-red w3-border w3-border-red w3-hover-white" onclick="@(async () => await DeleteChildAsync(child))">Удалить</button>
                                                }
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <img class="w3-image" style="max-width:300px" alt="Фото для @child.FirstName @child.LastName" src="@child.ImageUrl"/>
                                    }
                                    <span class="w3-large">
                                        @(string.Join(' ', new[] { child.LastName, child.FirstName, child.Patronymic }.Where(it => !string.IsNullOrEmpty(it))))
                                    </span>
                                </div>
                            </div>
                        }
                    </div>

                    if (childrenRow.Count < 3)
                    {
                        break;
                    }
                }
            }
        </div>

        <footer class="w3-teal w3-padding-small">
        </footer>
    </div>
</div>

@code
{
    bool AddingChildren { get; set; }
    bool Opened { get; set; }
    Subject Subject { get; set; }
    
    [Parameter]
    public bool EditSubjects { get; set; }

    [Parameter]
    public List<Child> AllChildren { get; set; }

    async Task DeleteChildAsync(Child child)
    {
        await using BookkeepingContext context = await DbFactory.CreateDbContextAsync();
        Subject__Child @ref = Subject.ChildrenReference.Find(@ref => @ref.ChildId == child.Id && @ref.SubjectId == Subject.Id)!;
        context.SubjectsChildrenReference.Remove(@ref);
        await context.SaveChangesAsync();

        Subject.ChildrenReference.Remove(@ref);
    }

    async Task AddChildAsync(Child child)
    {
        await using BookkeepingContext context = await DbFactory.CreateDbContextAsync();
        var @ref = new Subject__Child { Child = child, ChildId = child.Id, Subject = Subject, SubjectId = Subject.Id };
        context.SubjectsChildrenReference.Add(@ref);
        await context.SaveChangesAsync();
        
        Subject.ChildrenReference.Add(@ref);
    }

    async Task SetConsultationAsync()
    {
        await using BookkeepingContext context = await DbFactory.CreateDbContextAsync();
        context.Subjects.Attach(Subject).Property(s => s.IsConsultation).IsModified = true;
        await context.SaveChangesAsync();
    }

    void Close()
    {
        Opened = false;
        AddingChildren = false;
    }

    public void Open()
    {
        Opened = true;
    }

    public void SetSubject(Subject subject)
    {
        Subject = subject;
    }
}
