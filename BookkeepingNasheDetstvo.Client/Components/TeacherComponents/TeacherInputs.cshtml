@inherits SubmitComponentBase

<div class="w3-rest w3-mobile">
    <div class="w3-container w3-padding">
        <InputLabelComponent Label="Фамилия" Value="@Teacher.LastName" OnChange="@(it => { Teacher.LastName = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Имя" Value="@Teacher.FirstName" OnChange="@(it => { Teacher.FirstName = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Отчество" Value="@Teacher.SecondName" OnChange="@(it => { Teacher.SecondName = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Номер телефона" Value="@Teacher.PhoneNumber" OnChange="@(it => { Teacher.PhoneNumber = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Электронный адрес" Value="@Teacher.Email" OnChange="@(it => { Teacher.Email = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Ссылка на фото" Value="@Teacher.ImageUrl" OnChange="@(it => { Teacher.ImageUrl = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Пароль" Value="@Teacher.PasswordHash" OnChange="@(it => { Teacher.PasswordHash = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Дополнительное поле 1" Value="@Teacher.Additional" OnChange="@(it => { Teacher.Additional = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Дополнительное поле 2" Value="@Teacher.Additional2" OnChange="@(it => { Teacher.Additional2 = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Оплата за час занятия" Value="@Teacher.PerHour" OnChange="@(it => { Teacher.PerHour = (string)it.Value; Edited(); })" />
    </div>
    <br />
    <div class="w3-container w3-padding">
        <input class="w3-check" type="checkbox" bind="Teacher.WriteChildren" onclick="@Edited" />
        <label>Изменение личных данных детей</label>
        <br />
        <input class="w3-check" type="checkbox" bind="Teacher.WriteTeachers" onclick="@Edited" />
        <label>Изменение личных данных всех преподавателей</label>
        <br />
        <input class="w3-check" type="checkbox" bind="Teacher.WriteTeacherSubjects" onclick="@Edited" />
        <label>Изменение расписания всех преподавателей</label>
        <br />
        <input class="w3-check" type="checkbox" bind="Teacher.ReadStatistics" onclick="@Edited" />
        <label>Просмотр статистики</label>
    </div>
    <div class="w3-row">
        @if (!_success)
        {
            Console.WriteLine("Success: false");
            if (!_busy)
            {
                Console.WriteLine("Busy: false");
                <HalfButtonComponent Color="green" Text="Сохранить" Click=@Save />
                <HalfButtonComponent Color="red" Text="Удалить" Click=@Delete />
            }
            else if (_saving)
            {
                Console.WriteLine("Saving: true");
                <HalfButtonComponent Color="green" NoHover=true Text="Сохраняем..." />
                <HalfButtonComponent Color="red" Disabled=true NoHover=true Text="Удалить" />
            }
            else
            {
                Console.WriteLine("Saving: false");
                <HalfButtonComponent Color="green" Disabled=true NoHover=true Text="Сохранить" />
                <HalfButtonComponent Color="red" NoHover=true Text="Удаляем..." />
            }
        }
        else
        {
            Console.WriteLine("Success: true");
            <HalfButtonComponent Color="green" NoHover=true Disabled=true Text="Сохранить" />
            <HalfButtonComponent Color="red" Text="Удалить" Click=@Delete />
        }
    </div>
    @if (ReadStatistic)
    {
        <ButtonComponent Color="blue" Click=@(() => UriHelper.NavigateTo($"/statistic/teacher/{Teacher.Id}")) Text="Статистика" />
    }
</div>

@functions {
    bool _busy { get; set; } = false;
    bool _success { get; set; } = true;
    bool _saving { get; set; } = true;

    [Parameter]
    T Teacher { get; set; }

    [Parameter]
    bool ReadStatistic { get; set; }

    async void Save()
    {
        if (_busy || _success)
            return;

        _busy = true;
        _saving = true;
        StateHasChanged();

        Teacher.Id = await SubmitAsync(Teacher);

        _busy = false;
        _success = true;
        StateHasChanged();
    }

    async void Delete()
    {
        if (_busy)
            return;

        _busy = true;
        _saving = false;
        StateHasChanged();

        await DeleteAsync(Teacher.Id, "/teachers");
    }

    void Edited()
    {
        _success = false;
        StateHasChanged();
    }
}