<div id="modal" class="w3-modal w3-@(Opened ? "show" : "hide")">
    <div class="w3-modal-content w3-card-4 w3-animate-zoom">
        <header class="w3-teal w3-bar w3-padding-small">
            <button class="w3-bar-item w3-button w3-red w3-right w3-hover-teal w3-border w3-border-red w3-large" onclick="@Close">&times;</button>
            @if (EditSubjects)
            {
                 if (!AddingChildren)
                 {
                     <button class="w3-bar-item w3-button w3-green w3-large w3-border w3-border-green w3-hover-teal" onclick="@(() => AddingChildren = true)">Добавить ребёнка</button>
                 }
                 else
                 {
                     <button class="w3-bar-item w3-button w3-red w3-large w3-border w3-border-red w3-hover-teal" onclick="@(() => AddingChildren = false)">Завершить добавление</button>
                 }
            }
            <span class="w3-large w3-bar-item">Консультация</span>
            <div class="w3-bar-item w3-center">
                <label class="switch">
                    @if (EditSubjects)
                    {
                        <input type="checkbox" value="@IsConsultation" onchange="@((UIChangeEventArgs e) => { IsConsultation = (bool) e.Value; SetConsultationAsync(); })" />
                    }
                    else
                    {
                        <input type="checkbox" value="@IsConsultation" disabled />
                    }
                    <span class="slider round"></span>
                </label>
            </div>
        </header>

        <div class="w3-container">
            @for (var childOffset = 0;; childOffset++)
            {
                var childrenRow = (!AddingChildren ? SelectedChildren : AllChildren.Where(c => !SelectedChildren.Exists(sc => sc.Id == c.Id))).Skip(childOffset * 3).Take(3).ToList();
                if (childrenRow.Count == 0)
                {
                    break;
                }

                <div class="w3-row w3-padding-small">
                    @foreach (var child in childrenRow)
                    {
                        <div class="w3-third w3-mobile w3-padding-small">
                            <div class="w3-center w3-card-4 w3-round">
                                @if (EditSubjects)
                                {
                                    <div class="w3-display-container w3-hover-opacity">
                                        <img class="w3-image" style="max-width:300px" alt="Фото для @child.Name" src="@child.ImageUrl"/>
                                        <div class="w3-display-middle w3-display-hover">
                                            @if (AddingChildren)
                                            {
                                                <button class="w3-button w3-green w3-hover-text-green w3-border w3-border-green w3-hover-white" onclick="@(() => AddChildAsync(child.Id))">Добавить</button>
                                            }
                                            else
                                            {
                                                <button class="w3-button w3-red w3-hover-text-red w3-border w3-border-red w3-hover-white" onclick="@(() => DeleteChildAsync(child.Id))">Удалить</button>
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <img class="w3-image" style="max-width:300px" alt="Фото для @child.Name" src="@child.ImageUrl"/>
                                }
                                <span class="w3-large">@child.Name</span>
                            </div>
                        </div>
                    }
                </div>

                if (childrenRow.Count < 3)
                {
                    break;
                }
            }
        </div>

        <footer class="w3-teal w3-padding-small">
        </footer>
    </div>
</div>

@functions
{
    private bool AddingChildren { get; set; }
    private bool Opened { get; set; }
    private List<SubjectChildModel> SelectedChildren { get; set; }
    private string SubjectId { get; set; }
    private bool IsConsultation { get; set; }

    [Parameter]
    private bool EditSubjects { get; set; }

    [Parameter]
    private List<SubjectChildModel> AllChildren { get; set; }

    private async void DeleteChildAsync(string childId)
    {
        await PostAsync<object>("/api/subject/deleteChild", new
        {
            SubjectId, childId
        });
    }

    private async void AddChildAsync(string childId)
    {
        await PostAsync<object>("/api/subject/addChild", new
        {
            SubjectId, childId
        });
    }

    private async void SetConsultationAsync()
    {
        await PostAsync<object>("/api/subject/setConsultation", new
        {
            SubjectId, IsConsultation
        });
    }

    private void Close()
    {
        Opened = false;
        AddingChildren = false;
    }

    public void Open(SelectedChildrenModel model, bool isConsultation)
    {
        SelectedChildren = model.SelectedChildren;
        SubjectId = model.SubjectId;
        IsConsultation = isConsultation;
        Opened = true;
    }
}
