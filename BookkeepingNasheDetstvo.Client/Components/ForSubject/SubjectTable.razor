@inject SubjectState State

@if (_subjects != null)
{
    <div class="w3-container w3-padding-small">
        <h3>@DateInfo.date, @DateInfo.name</h3>
        <div class="w3-responsive">
            <table class="w3-table-all w3-centered">
                <tr>
                    @foreach (var teacher in AllTeachers)
                    {
                        <th>@teacher.LastName<br/>@teacher.FirstName</th>
                    }
                </tr>
                @foreach (var time in TimeExtensions.GetTimes())
                {
                    <tr>
                        @foreach (var teacher in AllTeachers)
                        {
                            var subject = _subjects.Find(s => s.OwnerId == teacher.Id && s.Time == time);
                            <td>
                                <button class="w3-transparent w3-button w3-block" onclick="@(() => OpenSubject(subject))">
                                    <strong>@time</strong>
                                    @if (subject?.IsConsultation ?? false)
                                    {
                                        <span class="w3-tag w3-yellow">К</span>
                                    }
                                    else if (subject?.IsGroup ?? false)
                                    {
                                        <span class="w3-tag w3-orange">Г</span>
                                    }
                                </button>
                            </td>
                        }
                    </tr>
                }
            </table>
        </div>
    </div>
}

@functions
{
    [Parameter]
    private (string date, string name) DateInfo { get; set; }

    [Parameter]
    private List<SubjectTeacherModel> AllTeachers { get; set; }

    [Parameter]
    private SubjectModal PopUp { get; set; }

    private List<SubjectModel> _subjects;

    private async void OpenSubject(SubjectModel subject)
    {
        var model = await GetAsync<SelectedChildrenModel>("/api/subject/selectedChildren/",
            new Dictionary<string, string> { ["subjectId"] = subject?.Id });
        PopUp.Open(model, subject?.IsConsultation ?? false);
    }

    protected override async Task OnInitAsync()
    {
        await CheckAccessToken();
        _subjects = await GetAsync<List<SubjectModel>>("/api/subjects/",
            new Dictionary<string, string> { ["date"] = DateInfo.date });
    }
}