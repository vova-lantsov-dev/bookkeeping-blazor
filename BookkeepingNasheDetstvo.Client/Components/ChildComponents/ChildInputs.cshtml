@using System.Globalization
@inherits BaseComponent

<div class="w3-rest w3-mobile">
    <div class="w3-container w3-padding">
        <InputLabelComponent Label="Фамилия" Value="@Child.LastName"
                             OnChange="@(it => { Child.LastName = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Имя" Value="@Child.FirstName"
                             OnChange="@(it => { Child.FirstName = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Отчество" Value="@Child.SecondName"
                             OnChange="@(it => { Child.SecondName = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Ссылка на фото" Value="@Child.ImageUrl"
                             OnChange="@(it => { Child.ImageUrl = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Отец" Value="@Child.FatherName"
                             OnChange="@(it => { Child.FatherName = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Телефон отца" Value="@Child.FatherPhone"
                             OnChange="@(it => { Child.FatherPhone = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Мать" Value="@Child.MotherName"
                             OnChange="@(it => { Child.MotherName = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Телефон матери" Value="@Child.MotherPhone"
                             OnChange="@(it => { Child.MotherPhone = (string)it.Value; Edited(); })" />
        <InputLabelComponent Label="Оплата за обычное занятие"
                             Value="@Child.PerHour.ToString(CultureInfo.CurrentCulture)"
                             OnChange="@(it =>
                                         {
                                             if (decimal.TryParse((string) it.Value, out var perHour))
                                             {
                                                 Child.PerHour = perHour;
                                                 Edited();
                                             }
                                         })" />
        <InputLabelComponent Label="Оплата за групповое занятие"
                             Value="@Child.PerHourGroup.ToString(CultureInfo.CurrentCulture)"
                             OnChange="@(it =>
                                         {
                                             if (decimal.TryParse((string) it.Value, out var perHour))
                                             {
                                                 Child.PerHourGroup = perHour;
                                                 Edited();
                                             }
                                         })"/>
    </div>
    <div class="w3-row">
        <HalfButtonSavingGroup IsSuccess="@Success" IsBusy="@Busy" IsSaving="@Saving" DeleteAsync="@DeleteAsync" SaveAsync="@SaveAsync" />
    </div>
    @if (ReadGlobalStatistic)
    {
        <ButtonComponent Color="blue" Click=@(() => UriHelper.NavigateTo($"/statistic/child/{Child.Id}")) Text="Статистика" />
    }
</div>

@functions {
    bool Busy { get; set; }
    bool Success { get; set; } = true;
    bool Saving { get; set; }

    [Parameter]
    ChildModel Child { get; set; }

    [Parameter]
    bool ReadGlobalStatistic { get; set; }

    async void SaveAsync()
    {
        if (Busy || Success)
            return;

        Busy = true;
        Saving = true;
        StateHasChanged();

        Child.Id = await Post<string>("/api/child", Child);

        Busy = false;
        Success = true;
        StateHasChanged();
    }

    async void DeleteAsync()
    {
        if (Busy)
            return;

        Busy = true;
        Saving = false;
        StateHasChanged();

        if (await Post("/api/child/delete", Child.Id))
            UriHelper.NavigateTo("/children");
    }

    void Edited()
    {
        Success = false;
        StateHasChanged();
    }
}