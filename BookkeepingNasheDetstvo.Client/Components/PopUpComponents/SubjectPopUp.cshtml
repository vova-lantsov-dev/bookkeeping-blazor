@inherits BaseComponent

@if (SelectedChildren != default)
{
    <div id="modal" class="w3-modal">
        <div class="w3-modal-content w3-card-4 w3-animate-zoom">
            <header class="w3-teal w3-bar w3-padding-small">
                @if (EditChildren)
                {
                    <span class="w3-xlarge w3-bar-item">Консультация</span>
                    <label class="switch">
                        <input type="checkbox" bind="@IsConsultation" onchange="@SetConsultationAsync">
                        <span class="slider round"></span>
                    </label>
                }
            </header>

            <div class="w3-container">
                @for (var childOffset = 0;; childOffset++)
                {
                    var childrenRow = SelectedChildren.Skip(childOffset * 3).Take(3).ToList();
                    var count = childrenRow.Count;
                    if (count == 0)
                    {
                        break;
                    }

                    <div class="w3-row w3-padding-small">
                        @foreach (var child in childrenRow)
                        {
                            <div class="w3-third w3-mobile w3-padding-small">
                                <div class="w3-center w3-card-4 w3-round">
                                    @if (EditChildren)
                                    {
                                        <div class="w3-display-container w3-hover-opacity">
                                            <img class="w3-image" style="max-width:300px" alt="Фото для @child.Name" src="@child.ImageUrl"/>
                                            <div class="w3-display-middle w3-display-hover">
                                                <button class="w3-button w3-red w3-hover-text-red w3-border w3-border-red w3-hover-white" onclick="@(() => DeleteChildAsync(child.Id))">Удалить</button>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <img class="w3-image" style="max-width:300px" alt="Фото для @child.Name" src="@child.ImageUrl"/>
                                    }
                                    <span class="w3-large">@child.Name</span>
                                </div>
                            </div>
                        }
                    </div>

                    if (count < 3)
                    {
                        break;
                    }
                }
            </div>

            <footer class="w3-teal w3-container w3-padding-small">
                @if (EditChildren && AllChildren.Count > 0)
                {
                    <div class="w3-dropdown-click">
                        <button onclick="triggerSubjectDropdown()" class="w3-button w3-blue w3-hover-white w3-text-white w3-hover-text-blue w3-border w3-border-blue">Добавить ребёнка</button>
                        <div id="subject-dropdown" class="w3-dropdown-content w3-bar-block w3-animate-zoom">
                            @foreach (var child in AllChildren)
                            {
                                <div class="w3-bar-item w3-button w3-center" onclick="@(() => AddChildAsync(child.Id))">
                                    <strong>@child.Name</strong>
                                    <img class="w3-image" alt="Фото для @child.Name" src="@child.ImageUrl"/>
                                </div>
                            }
                        </div>
                    </div>
                }
            </footer>
        </div>
    </div>
}

@functions
{

    private List<SubjectItemModel> SelectedChildren { get; set; }
    
    [Parameter]
    private bool IsConsultation { get; set; }
    
    [Parameter]
    private bool EditChildren { get; set; }
    
    [Parameter]
    private bool SubjectId { get; set; }
    
    [Parameter]
    private List<SubjectItemModel> AllChildren { get; set; }

    private async void DeleteChildAsync(string childId)
    {
        await Post("/api/subject/deleteChild", new
        {
            SubjectId, childId
        });
    }

    private async void AddChildAsync(string childId)
    {
        await Post("/api/subject/addChild", new
        {
            SubjectId, childId
        });
    }

    private async void SetConsultationAsync()
    {
        await Post("/api/subject/setConsultation", new
        {
            SubjectId, IsConsultation
        });
    }

    protected override async Task OnInitAsync()
    {
        SelectedChildren = await Get<List<SubjectItemModel>>("/api/subject/selectedChildren");
        if (SelectedChildren == default || SelectedChildren.Count == 0)
            return;
        
        AllChildren.RemoveAll(child => SelectedChildren.Exists(selectedChild => selectedChild.Id == child.Id));
    }

}
