@layout __Layout
@page "/"
@using System.Globalization
@using BookkeepingNasheDetstvo.Client.Components.PopUpComponents
@inherits BaseComponent

<InputDateComponent Date="@_date" OnChange="@((DateTime dt) =>
                                              {
                                                  _date = dt;
                                                  UpdateDates();
                                                  StateHasChanged();
                                              })" />

@if (_dates.Count > 0)
{
    if (PopUp != null)
    {
        <ul class="w3-ul w3-card-4">
            @foreach (var date in _dates)
            {
                <SubjectsTable DateInfo="@date" AllTeachers="@AllTeachers" PopUp="@PopUp"/>
            }
        </ul>
    }
    <SubjectPopUp ref="PopUp" EditSubjects="@(Current.EditSubjects || Current.IsOwner)" AllChildren="@AllChildren" />
}

@functions {
    private readonly List<(string date, string name)> _dates = new List<(string date, string name)>();
    private readonly DateTimeFormatInfo _dtFormat = new CultureInfo("ru-RU").DateTimeFormat;
    private DateTime _date = DateTime.Today;
    private List<SubjectItemModel> AllChildren { get; set; }
    private List<IdFullNamePair> AllTeachers { get; set; }
    private SubjectPopUp PopUp { get; set; }

    protected override async Task OnInitAsync()
    {
        await CheckAccessToken();
        await LoadCurrent();

        AllChildren = await Get<List<SubjectItemModel>>("/api/subject/allChildren");
        AllTeachers = await Get<List<IdFullNamePair>>("/api/subject/allTeachers");
        
        UpdateDates();
    }

    private void UpdateDates()
    {
        var copyDate = _date;
        _dates.Clear();
        for (var i = 0; i < 7; i++)
        {
            if (copyDate.DayOfWeek != DayOfWeek.Sunday)
                _dates.Add((copyDate.ToString("dd-MM-yyyy"), _dtFormat.GetDayName(copyDate.DayOfWeek)));
            copyDate = copyDate.AddDays(1d);
        }
    }
}